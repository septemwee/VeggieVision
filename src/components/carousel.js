'use client';

import React, { useRef, useState, useEffect } from 'react';

// ‡πÑ‡∏≠‡∏Ñ‡∏≠‡∏ô‡∏•‡∏π‡∏Å‡∏®‡∏£‡∏ã‡πâ‡∏≤‡∏¢
const ChevronLeftIcon = () => (
    <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" strokeWidth={2.5} stroke="currentColor" className="w-6 h-6">
        <path strokeLinecap="round" strokeLinejoin="round" d="M15.75 19.5L8.25 12l7.5-7.5" />
    </svg>
);

// ‡πÑ‡∏≠‡∏Ñ‡∏≠‡∏ô‡∏•‡∏π‡∏Å‡∏®‡∏£‡∏Ç‡∏ß‡∏≤
const ChevronRightIcon = () => (
    <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" strokeWidth={2.5} stroke="currentColor" className="w-6 h-6">
        <path strokeLinecap="round" strokeLinejoin="round" d="M8.25 4.5l7.5 7.5-7.5 7.5" />
    </svg>
);


/**
 * CustomCarousel Component
 * Carousel ‡∏ó‡∏µ‡πà‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡∏Ç‡∏∂‡πâ‡∏ô‡πÄ‡∏≠‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÇ‡∏î‡∏¢‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πâ library
 * @param {object} props
 * @param {React.ReactNode} props.children - item ‡∏ó‡∏µ‡πà‡∏à‡∏∞‡πÅ‡∏™‡∏î‡∏á‡πÉ‡∏ô Carousel
 */
export default function Carousel({ children }) {
    const scrollContainerRef = useRef(null);
    const [isAtStart, setIsAtStart] = useState(true);
    const [isAtEnd, setIsAtEnd] = useState(false);
    
    // üî¥ ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ç‡∏ô‡∏≤‡∏î gap ‡∏Ç‡∏≠‡∏á Card (‡∏ï‡πâ‡∏≠‡∏á‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö gap-4 ‡πÉ‡∏ô className ‡∏Ç‡∏≠‡∏á div scrollContainerRef)
    const cardGap = 16; // gap-4 ‡πÉ‡∏ô Tailwind CSS ‡∏Ñ‡∏∑‡∏≠ 16px
    // ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô Card ‡∏ó‡∏µ‡πà‡πÅ‡∏™‡∏î‡∏á‡πÉ‡∏ô‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏´‡∏ô‡πâ‡∏≤ (‡∏ï‡∏≤‡∏° OutputDisplay ‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ w-1/3)
    const cardsPerPage = 3;

    // 2. ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏•‡∏∑‡πà‡∏≠‡∏ô
    const handleScroll = (direction) => {
        const container = scrollContainerRef.current;
        if (container) {
            // üî¥ ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô scrollAmount ‡πÉ‡∏´‡πâ‡πÄ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡∏ó‡∏µ‡∏•‡∏∞ 1 Card + gap
            // ‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏±‡πà‡∏ô‡πÉ‡∏à‡∏ß‡πà‡∏≤ Card ‡∏°‡∏µ w-1/3 ‡πÅ‡∏•‡∏∞ gap-4 ‡∏ñ‡∏π‡∏Å‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÑ‡∏ß‡πâ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
            const firstCard = container.querySelector('.flex-shrink-0'); // ‡∏≠‡πâ‡∏≤‡∏á‡∏≠‡∏¥‡∏á Card ‡∏ï‡∏±‡∏ß‡πÅ‡∏£‡∏Å
            if (!firstCard) return;

            // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Å‡∏ß‡πâ‡∏≤‡∏á‡∏Ç‡∏≠‡∏á 1 Card (‡∏£‡∏ß‡∏° margin ‡∏î‡πâ‡∏≤‡∏ô‡∏Ç‡∏ß‡∏≤‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)
            // clientWidth ‡∏Ç‡∏≠‡∏á Card 1 ‡πÉ‡∏ö + gap ‡∏ó‡∏µ‡πà‡∏ï‡∏≤‡∏°‡∏°‡∏≤
            const scrollAmount = firstCard.clientWidth + cardGap; 
            
            const newScrollLeft = direction === 'right' 
                ? container.scrollLeft + scrollAmount 
                : container.scrollLeft - scrollAmount;
            
            container.scrollTo({
                left: newScrollLeft,
                behavior: 'smooth' 
            });
        }
    };

    // 3. ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£ scroll (‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ã‡πà‡∏≠‡∏ô/‡πÅ‡∏™‡∏î‡∏á‡∏õ‡∏∏‡πà‡∏°)
    const checkScrollPosition = () => {
        const container = scrollContainerRef.current;
        if (container) {
            const { scrollLeft, scrollWidth, clientWidth } = container;
            // üî¥ ‡∏õ‡∏£‡∏±‡∏ö‡∏Ñ‡πà‡∏≤ isAtStart/isAtEnd ‡πÉ‡∏´‡πâ‡∏¢‡∏∑‡∏î‡∏´‡∏¢‡∏∏‡πà‡∏ô‡∏Ç‡∏∂‡πâ‡∏ô‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢
            // ‡πÉ‡∏ä‡πâ‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡πÉ‡∏Å‡∏•‡πâ‡πÄ‡∏Ñ‡∏µ‡∏¢‡∏á 0 ‡∏´‡∏£‡∏∑‡∏≠ scrollWidth - clientWidth
            setIsAtStart(scrollLeft <= 10); // buffer 10px
            setIsAtEnd(scrollLeft + clientWidth >= scrollWidth - 10); // buffer 10px
        }
    };

    // 4. ‡πÉ‡∏ä‡πâ useEffect ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏£‡∏µ‡∏¢‡∏Å checkScrollPosition ‡πÄ‡∏°‡∏∑‡πà‡∏≠ component ‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏™‡∏£‡πá‡∏à‡πÅ‡∏•‡∏∞ Resize
    useEffect(() => {
        // üî¥ ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ scrollLeft ‡πÄ‡∏õ‡πá‡∏ô 0 ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÇ‡∏´‡∏•‡∏î‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÅ‡∏£‡∏Å ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏ä‡∏¥‡∏î‡∏ã‡πâ‡∏≤‡∏¢‡∏™‡∏∏‡∏î‡πÄ‡∏™‡∏°‡∏≠
        if (scrollContainerRef.current) {
            scrollContainerRef.current.scrollLeft = 0;
        }
        checkScrollPosition();
        window.addEventListener('resize', checkScrollPosition);
        return () => window.removeEventListener('resize', checkScrollPosition);
    }, []);

    // 5. ‡πÄ‡∏û‡∏¥‡πà‡∏° event listener ‡πÉ‡∏´‡πâ checkScrollPosition ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡∏∑‡πà‡∏≠‡∏ô
    useEffect(() => {
        const container = scrollContainerRef.current;
        if (container) {
            container.addEventListener('scroll', checkScrollPosition);
            return () => container.removeEventListener('scroll', checkScrollPosition);
        }
    }, []);


    return (
        // üî¥ ‡∏õ‡∏£‡∏±‡∏ö class ‡∏Ç‡∏≠‡∏á div ‡∏ô‡∏≠‡∏Å‡∏™‡∏∏‡∏î (relative container)
        // mx-auto ‡∏à‡∏±‡∏î‡πÉ‡∏´‡πâ‡∏≠‡∏¢‡∏π‡πà‡∏Å‡∏∂‡πà‡∏á‡∏Å‡∏•‡∏≤‡∏á, w-full, ‡πÅ‡∏•‡∏∞‡πÄ‡∏û‡∏¥‡πà‡∏° px-4 ‡πÉ‡∏´‡πâ‡∏°‡∏µ padding ‡∏î‡πâ‡∏≤‡∏ô‡∏Ç‡πâ‡∏≤‡∏á
        <div className="relative w-full max-w-5xl mx-auto px-4"> 
            {/* ‡∏õ‡∏∏‡πà‡∏°‡πÄ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡∏ã‡πâ‡∏≤‡∏¢ */}
            {!isAtStart && (
                <button 
                    onClick={() => handleScroll('left')} 
                    // üî¥ ‡∏õ‡∏£‡∏±‡∏ö‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏õ‡∏∏‡πà‡∏°: ‡πÉ‡∏´‡πâ‡∏°‡∏±‡∏ô‡∏ä‡∏¥‡∏î‡∏ã‡πâ‡∏≤‡∏¢‡∏Ç‡∏≠‡∏á div ‡∏ó‡∏µ‡πà‡∏°‡∏µ px-4
                    className="absolute top-1/2 left-0 -translate-y-1/2 -translate-x-1/2 bg-white rounded-full p-2 shadow-md z-10 hover:bg-gray-100 transition"
                    aria-label="Previous"
                >
                    <ChevronLeftIcon />
                </button>
            )}

            {/* Container ‡∏ó‡∏µ‡πà‡∏à‡∏∞ scroll */}
            <div 
                ref={scrollContainerRef}
                // üî¥ ‡∏ô‡∏≥ px-6 ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏ï‡∏£‡∏á‡∏ô‡∏µ‡πâ ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ padding ‡∏ñ‡∏π‡∏Å‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÇ‡∏î‡∏¢ div ‡∏î‡πâ‡∏≤‡∏ô‡∏ô‡∏≠‡∏Å
                // ‡πÅ‡∏•‡∏∞‡∏¢‡∏±‡∏á‡∏Ñ‡∏á‡∏°‡∏µ gap-4 ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ä‡πà‡∏≠‡∏á‡∏ß‡πà‡∏≤‡∏á‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á Card
                className="flex items-stretch gap-4 py-2 overflow-x-auto snap-x snap-mandatory hide-scrollbar"
            >
                {children}
            </div>

            {/* ‡∏õ‡∏∏‡πà‡∏°‡πÄ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡∏Ç‡∏ß‡∏≤ */}
            {!isAtEnd && (
                <button 
                    onClick={() => handleScroll('right')}
                    // üî¥ ‡∏õ‡∏£‡∏±‡∏ö‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏õ‡∏∏‡πà‡∏°: ‡πÉ‡∏´‡πâ‡∏°‡∏±‡∏ô‡∏ä‡∏¥‡∏î‡∏Ç‡∏ß‡∏≤‡∏Ç‡∏≠‡∏á div ‡∏ó‡∏µ‡πà‡∏°‡∏µ px-4
                    className="absolute top-1/2 right-0 -translate-y-1/2 translate-x-1/2 bg-white rounded-full p-2 shadow-md z-10 hover:bg-gray-100 transition"
                    aria-label="Next"
                >
                    <ChevronRightIcon />
                </button>
            )}
        </div>
    );
}